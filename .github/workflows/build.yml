name: Build and Package Qt Application with CMake (Release + Ninja)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
      fail-fast: false
    name: Build on ${{ matrix.os }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v3
    
    # Install Qt for each platform
    - name: Install Qt windows
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.2.2'
        arch: 'win64_mingw'
    
    - name: Install Qt linux 
      if: matrix.os == 'ubuntu-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.2.*'
        target: 'desktop'
    
    - name: Install Qt mac
      if: matrix.os == 'macOS-latest'
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.2.*'
        target: 'desktop'
    
    # Install build tools (CMake + Ninja)
    - name: Install CMake
      uses: lukka/get-cmake@latest
      with:
        cmake-version: '3.25.0'
    
    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
    
    # Create build directory
    - name: Create build directory
      run: mkdir build && cd build
    
    # Configure with CMake (Ninja generator + Release mode)
    - name: Configure with CMake
      run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
    
    # Build with Ninja
    - name: Build application
      run: ninja -j$(nproc)  # 自动使用所有CPU核心
    
    # Package application for each platform
    - name: Package Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p app
        cp ${{ env.BUILD_TYPE }}/class-manager.exe app/
        cd app
        windeployqt class-manager.exe
    
    - name: Package Linux application
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p app
        cp class-manager app/
    
    - name: Package macOS application
      if: matrix.os == 'macOS-latest'
      run: |
        mkdir -p app
        cp class-manager.app/Contents/MacOS/class-manager app/
    
    # Create archive
    - name: Create compressed archive
      run: tar -czvf app-${{ matrix.os }}.tar.gz app
    
    # Upload artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.os }}
        path: app-${{ matrix.os }}.tar.gz